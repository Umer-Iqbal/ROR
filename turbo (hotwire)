Turbo Stream:-

................................................................(controller and view start)
controller method:-
def file_name
end

redirection view:-
file_name.turbo_stream.erb

-----------------------------------------------------------------------(controller and view end)

.......................................................................(js request sent start)

how to send request trubo stream request form js:

turbo stream GET request:-
method 1:-
  async openOrders() {
    const response = await get(`${this.ordersUrl}`, {
      responseKind: "turbo-stream"
    });
    if (response.ok) {
      document.getElementById('rightSideOrderWrapper').parentElement.classList.add('show')
      document.getElementById('rightSideOrderWrapper').classList.remove('d-none')
    }
  }
  
 method 2:- 
   get(`${this.urlValue}`, {
      query: {
        product_ids: this.selection,
        tab: this.tabValue
      },
      responseKind: "turbo-stream"
    });
  
turbo stream POST request:-

      async add() {
        const response = await post(`/projects/${this.projectIdValue}/floor_plans/${this.floorplanId}/spaces`, {
            body: {
                name: searchText
            },
            responseKind: "turbo-stream"
        });
        if (response.ok) {
        }
    }
    
    
 
 
 method 3:-
 submit as a url request
  async sendRequestAsTurbo(that, products) {
    const method = that.methodValue || 'get';
    const url = `${this.urlValue}?product_ids=${products}`;
    const response = await $.ajax({
      type: method,
      url: url,
      headers: {
        'Accept': 'text/vnd.turbo-stream.html'
      }
    });
    // Do something with the response
  }
    
    
-----------------------------------------------------------------------(js request sent end)    


.......................................................................(form request sent start)
  
how to send request trubo stream request form rails form: 

if we want to post form to GET route:-
<%= form_with url: project_orders_orders_path, class: 'd-contents', html: { 'data-turbo-stream': 'true' }, method: :GET do |form| %>
<% end %>


-----------------------------------------------------------------------(form request sent end)










broadcasting with multiple streams form controller:

if @marker.save
      @product.update(quantity: @product.markers.size) if @product.quantity < @product.markers.size
      render turbo_stream: [
        turbo_stream.update_all(".product_#{@product.id}_quantity", "x #{@product.quantity}"),
        turbo_stream.replace('floorplan_products_wrapper', partial: 'products/list_in_tab',
                                                           locals: { floor_plan: @product.floor_plan, products: @product.floor_plan.products, product_ids: @product.floor_plan.products.pluck(:id) }),
      ]

      Turbo::StreamsChannel.broadcast_update_to("product_detail_list", target: "product_detail", partial: "products/product_detail_list",
                                                locals: {product: @product, current_user: current_user})
                                                
 end
